/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Happened API
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;

export interface GreetingOutputBody {
  /** A URL to the JSON Schema for this object. */
  readonly $schema?: string;
  /** Greeting message */
  message: string;
}

export interface ErrorDetail {
  /** Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id' */
  location?: string;
  /** Error message text */
  message?: string;
  /** The value at the given location */
  value?: unknown;
}

/**
 * Optional list of individual error details
 */
export type ErrorModelErrors = ErrorDetail[] | null;

export interface ErrorModel {
  /** A URL to the JSON Schema for this object. */
  readonly $schema?: string;
  /** A human-readable explanation specific to this occurrence of the problem. */
  detail?: string;
  /** Optional list of individual error details */
  errors?: ErrorModelErrors;
  /** A URI reference that identifies the specific occurrence of the problem. */
  instance?: string;
  /** HTTP status code */
  status?: number;
  /** A short, human-readable summary of the problem type. This value should not change between occurrences of the error. */
  title?: string;
  /** A URI reference to human-readable documentation for the error. */
  type?: string;
}

export interface CreateUploadURLRequestBody {
  /** A URL to the JSON Schema for this object. */
  readonly $schema?: string;
  image_key: string;
}

export type CreateUploadURLBodySignedHeaders = {[key: string]: string};

export interface CreateUploadURLBody {
  /** A URL to the JSON Schema for this object. */
  readonly $schema?: string;
  method: string;
  signed_headers: CreateUploadURLBodySignedHeaders;
  upload_url: string;
}





  /**
 * @summary Post create upload URL
 */
export const postCreateUploadUrl = <TData = AxiosResponse<CreateUploadURLBody>>(
    createUploadURLRequestBody: NonReadonly<CreateUploadURLRequestBody>, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/create-upload-url`,
      createUploadURLRequestBody,options
    );
  }

/**
 * Protected version of greet
 * @summary Get a protected greeting
 */
export const protectedGreet = <TData = AxiosResponse<GreetingOutputBody>>(
    name: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/greeting/protected/${name}`,options
    );
  }

/**
 * Get a greeting for a person by name.
 * @summary Get a greeting
 */
export const getGreeting = <TData = AxiosResponse<GreetingOutputBody>>(
    name: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/greeting/public/${name}`,options
    );
  }

export type PostCreateUploadUrlResult = AxiosResponse<CreateUploadURLBody>
export type ProtectedGreetResult = AxiosResponse<GreetingOutputBody>
export type GetGreetingResult = AxiosResponse<GreetingOutputBody>
